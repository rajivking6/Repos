
public class BruteCollinearPoints {
	private LineSegment[] segment;
	private int count=0;
   public BruteCollinearPoints(Point[] points){
	   segment = new LineSegment[points.length/4];
	   for (int p = 0; p < points.length - 3; p++) {
           for (int q = p + 1; q < points.length - 2; q++) {
               for (int r = q + 1; r < points.length - 1; r++) {
                   for (int s = r + 1; s < points.length; s++) {
                	   if(points[p].slopeTo(points[q])==points[p].slopeTo(points[r])&&
                	      points[p].slopeTo(points[q])==points[p].slopeTo(points[s])){
                		   findEndpoints(points[q],points[p],points[r],points[s]);
                		   count++;   	   
                	   }  
                	   }
                	   }
                	   }
                		   
                   }
   }// finds all line segments containing 4 points
   public int numberOfSegments(){
	   return count;
	   
   }// the number of line segments
   public LineSegment[] segments(){
	   return segment;
}// the line segments
   private LineSegment findEndpoints(Point a, Point b,Point c, Point d){
	   Point[] coll = {a,b,c,d};
	   Point min = coll[0];
	   Point max = coll[0];
	   for(int i =0;i<coll.length;i++){
		   if(min.compareTo(coll[i])<0)
			   min = coll[i]; 
		   if(max.compareTo(coll[i])>0)
			   max = coll[i];
	   }
	   return new LineSegment(min,max);
	   
   }
  public static void main(String[] args){
	   Point p1 = new Point(3,4);
	   Point p2 = new Point(4,4);
	   Point p3 = new Point(1,4);
	   Point p4 = new Point(6,4);
	   Point[] array ={p1,p4,p2,p3};
	   BruteCollinearPoints points = new BruteCollinearPoints(array);
	   for(LineSegment p: points.segment){
		   System.out.print(p + " ");		   
	   }
	   
}
}
